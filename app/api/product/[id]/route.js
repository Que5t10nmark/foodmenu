import { NextResponse } from "next/server"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á Response ‡∏à‡∏≤‡∏Å API
import { writeFile } from "fs/promises"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
import { join } from "path"; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏° path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å OS)
import pool from "../../../../lib/db"; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ database connection pool

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
async function handleDBQuery(query, params) {
  try {
    const [result] = await pool.query(query, params); // ‚úÖ ‡∏£‡∏±‡∏ô SQL query
    return result; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  } catch (error) {
    throw new Error(error.message); // ‚úÖ ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  }
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (GET)
export async function GET(req, { params }) {
  const routeParams = await params;
  const product_id = Number(routeParams?.id); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  if (isNaN(product_id)) {
    // ‚úÖ ‡∏ñ‡πâ‡∏≤ id ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏™‡πà‡∏á error 400
    return NextResponse.json(
      { message: "‚ùå Invalid product ID" },
      { status: 400 }
    );
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const product = await handleDBQuery(
    `SELECT p.*, pt.product_type_name 
    FROM product p
    JOIN product_type pt ON p.product_type = pt.product_type_id
    WHERE p.product_id = ?`,
    [product_id]
  );

  return NextResponse.json(
    product.length ? product[0] : { message: "‚ùå Product not found" },
    { status: product.length ? 200 : 404 }
  );
}  

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (POST)
export async function POST(req) {
  try {
    const formData = await req.formData(); // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    const productData = {
      product_name: formData.get("product_name") || "", // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      product_type: formData.get("product_type") || "", // ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      product_price: formData.get("product_price") || "0", // ‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤
      product_size: formData.get("product_size") || "", // ‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î
      product_description: formData.get("product_description") || "", // ‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
      product_status: formData.get("product_status") === "1" ? 1 : 0, // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (1 = ‡∏°‡∏µ, 0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ)
    };

    let product_image = ""; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const file = formData.get("file"); // ‚úÖ ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    if (file && file.name) {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const ext = file.name.split(".").pop(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
      product_image = `${Date.now()}.${ext}`; // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
      const filePath = join(process.cwd(), "public/uploads", product_image); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
      await writeFile(filePath, Buffer.from(await file.arrayBuffer())); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const query = `
      INSERT INTO product 
      (product_name, product_type, product_price, product_size, product_image, product_description, product_status) 
      VALUES (?, ?, ?, ?, ?, ?, ?)`;

    const params = [
      productData.product_name,
      productData.product_type,
      productData.product_price,
      productData.product_size,
      product_image, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      productData.product_description,
      productData.product_status,
    ];

    const result = await handleDBQuery(query, params); // ‚úÖ ‡∏£‡∏±‡∏ô SQL query

    return NextResponse.json(
      { message: "‚úÖ Product added", product_id: result.insertId }, // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
      { status: 201 }
    );
  } catch (error) {
    return NextResponse.json(
      { message: "‚ùå Error adding product", error: error.message },
      { status: 500 }
    );
  }
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (PUT)
export async function PUT(req, { params }) {
  try {
    console.log("üîπ Request received:", req.method, req.url);
    const routeParams = await params;
    const product_id = Number(routeParams.id);
    if (!product_id || isNaN(product_id)) {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      return NextResponse.json(
        { message: "‚ùå Invalid product ID" },
        { status: 400 }
      );
    }

    const contentType = req.headers.get("content-type") || ""; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    let productData = {};
    let product_image = "";

    if (contentType.includes("multipart/form-data")) {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô multipart/form-data ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
      const formData = await req.formData();
      console.log("üîπ Received formData:", formData);

      productData = {
        product_name: formData.get("product_name") || "",
        product_type: formData.get("product_type") || "",
        product_price: formData.get("product_price") || "0",
        product_size: formData.get("product_size") || "",
        product_description: formData.get("product_description") || "",
        product_status: formData.get("product_status") === "1" ? 1 : 0,
      };

      const file = formData.get("file"); // ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
      if (file && file.name) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
        const ext = file.name.split(".").pop();
        product_image = `${Date.now()}.${ext}`;
        const filePath = join(process.cwd(), "public/uploads", product_image);
        await writeFile(filePath, Buffer.from(await file.arrayBuffer())); // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        console.log("‚úÖ Image uploaded:", product_image);
      } else {
        product_image = formData.get("product_image") || ""; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°
      }
    } else {
      productData = await req.json();
      product_image = productData.product_image || ""; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    }

    console.log("üîπ Parsed productData:", productData);
    console.log("üîπ Using product_image:", product_image);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const query = `
      UPDATE product 
      SET product_name = ?, product_type = ?, product_price = ?, 
          product_size = ?, product_image = ?, product_description = ?, 
          product_status = ? 
      WHERE product_id = ?
    `;

    const queryParams = [
      productData.product_name,
      productData.product_type,
      productData.product_price,
      productData.product_size,
      product_image,
      productData.product_description,
      productData.product_status,
      product_id,
    ];

    console.log("üîπ Executing SQL Query:", query);
    console.log("üîπ Query Parameters:", queryParams);

    const [result] = await pool.query(query, queryParams);
    console.log("‚úÖ Query result:", result);

    return NextResponse.json(
      {
        message: result.affectedRows
          ? "‚úÖ Product updated"
          : "‚ùå Product not found",
      },
      { status: result.affectedRows ? 200 : 404 }
    );
  } catch (error) {
    console.error("‚ùå Error updating product:", error);
    return NextResponse.json(
      { message: "‚ùå Error updating product", error: error.message },
      { status: 500 }
    );
  }
}

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (DELETE)
export async function DELETE(req) {
  const product_id = Number(req.nextUrl.pathname.split("/").pop());
  if (isNaN(product_id)) {
    return NextResponse.json(
      { message: "‚ùå Invalid product ID" },
      { status: 400 }
    );
  }

  const result = await handleDBQuery(
    "DELETE FROM product WHERE product_id = ?",
    [product_id]
  );

  return NextResponse.json(
    {
      message: result.affectedRows
        ? "‚úÖ Product deleted"
        : "‚ùå Product not found",
    },
    { status: result.affectedRows ? 200 : 404 }
  );
}
