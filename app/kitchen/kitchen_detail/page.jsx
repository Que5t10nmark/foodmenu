"use client";
import { useEffect, useState } from "react";
import Link from "next/link";

export default function KitchenGroupedByProduct() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState(null);

  useEffect(() => {
    const fetchOrders = () => {
      fetch("/api/purchase")
        .then((res) => res.json())
        .then((data) => {
          setOrders(data);
          setLoading(false);
        })
        .catch((err) => {
          console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
          setLoading(false);
        });
    };

    fetchOrders();
    const interval = setInterval(fetchOrders, 2000);
    return () => clearInterval(interval);
  }, []);

  const handleStatusUpdate = async (purchaseId, newStatus) => {
    try {
      const response = await fetch(`/api/purchase/${purchaseId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");

      setOrders((prev) =>
        prev.map((order) =>
          order.purchase_id === purchaseId
            ? { ...order, purchase_status: newStatus }
            : order
        )
      );

      setMessage(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "${newStatus}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      setTimeout(() => setMessage(null), 2000);
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", error);
      setMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞");
      setTimeout(() => setMessage(null), 2000);
    }
  };

  if (loading) {
    return <div className="p-6 text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  }

  const activeOrders = orders.filter(
    (order) =>
      order.purchase_status !== "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" &&
      order.purchase_status !== "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
  );

  const groupedByProduct = activeOrders.reduce((acc, order) => {
    const name = order.product_name;
    if (!acc[name]) acc[name] = [];
    acc[name].push(order);
    return acc;
  }, {});

  return (
    <div className="p-6 max-h-screen overflow-auto text-base">
      <div className="mb-4 flex justify-between items-center">
        <h1 className="text-3xl font-bold">üçΩÔ∏è ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£)</h1>
        <Link href="/kitchen" className="text-blue-600 underline text-lg">
          ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∏‡πä‡∏õ‡∏ï‡∏≤‡∏°‡πÇ‡∏ï‡πä‡∏∞
        </Link>
      </div>

      {message && (
        <div
          className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 
          bg-green-700 text-white border border-green-300 px-6 py-3 
          rounded-xl shadow-lg z-50 animate-fade text-xl"
        >
          {message}
        </div>
      )}

      {Object.keys(groupedByProduct).length === 0 ? (
        <div className="text-center text-gray-500 text-lg">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</div>
      ) : (
        Object.entries(groupedByProduct).map(([productName, orders]) => {
          const total = orders.reduce((sum, o) => sum + o.purchase_quantity, 0);
          return (
            <div key={productName} className="mb-10">
              <div className="font-bold text-2xl mb-4 bg-gray-100 p-4 rounded">
                üçõ ‡πÄ‡∏°‡∏ô‡∏π: {productName} ‚Äî ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total} ‡∏à‡∏≤‡∏ô
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full bg-white border border-gray-300 rounded-xl text-lg">
                  <thead className="bg-gray-100 text-left">
                    <tr>
                      <th className="p-3 border-b">‡πÇ‡∏ï‡πä‡∏∞</th>
                      <th className="p-3 border-b">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                      <th className="p-3 border-b">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                      <th className="p-3 border-b">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                      <th className="p-3 border-b">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á</th>
                      <th className="p-3 border-b">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                      <th className="p-3 border-b">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orders.map((order) => {
                      let optionsObj = {};
                      if (order.selected_option) {
                        try {
                          optionsObj =
                            typeof order.selected_option === "string"
                              ? JSON.parse(order.selected_option)
                              : order.selected_option;
                        } catch {
                          optionsObj = { ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: order.selected_option };
                        }
                      }

                      return (
                        <tr key={order.purchase_id} className="border-t">
                          <td className="p-3">{order.seat_id}</td>
                          <td className="p-3">{order.purchase_quantity}</td>
                          <td className="p-3">
                            {Object.entries(optionsObj).map(([key, val], i) => (
                              <div key={i}>
                                <span className="font-medium">{key}:</span>{" "}
                                {Array.isArray(val) ? val.join(", ") : val}
                              </div>
                            ))}
                          </td>
                          <td className="p-3">{order.purchase_description}</td>
                          <td className="p-3">
                            {new Date(order.purchase_date).toLocaleString("th-TH", {
                              timeZone: "Asia/Bangkok",
                            })}
                          </td>
                          <td className="p-3 text-blue-600 font-semibold">
                            {order.purchase_status}
                          </td>
                          <td className="p-3 space-x-2 flex">
                            <button
                              className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded flex-1 text-base"
                              onClick={() =>
                                handleStatusUpdate(order.purchase_id, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥")
                              }
                            >
                              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
                            </button>
                            <button
                              className="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded flex-1 text-base"
                              onClick={() =>
                                handleStatusUpdate(order.purchase_id, "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                              }
                            >
                              ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                            </button>
                            <button
                              className="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded flex-1 text-base"
                              onClick={() =>
                                handleStatusUpdate(order.purchase_id, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                              }
                            >
                              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          );
        })
      )}
    </div>
  );
}
