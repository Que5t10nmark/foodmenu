"use client";
import { useEffect, useState } from "react";

export default function KitchenPage() {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const now = new Date().toISOString();

  useEffect(() => {
    const fetchOrders = () => {
      fetch("/api/purchase")
        .then((res) => res.json())
        .then((data) => {
          setOrders(data);
          setLoading(false);
        })
        .catch((err) => {
          console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
          setLoading(false);
        });
    };

    fetchOrders(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å

    const interval = setInterval(fetchOrders, 2000); // ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥

    return () => clearInterval(interval); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
  }, []);
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
  const handleStatusUpdate = async (purchaseId, newStatus) => {
    try {
      const response = await fetch(`/api/purchase/${purchaseId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ");
      }

      setOrders((prev) =>
        prev.map((order) =>
          order.purchase_id === purchaseId
            ? { ...order, purchase_status: newStatus }
            : order
        )
      );
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:", error);
    }
  };

  if (loading) {
    return <div className="p-6 text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  }
  
  // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢‡πÇ‡∏ï‡πä‡∏∞
  const groupedOrders = orders.reduce((acc, order) => {
    if (!acc[order.seat_id]) {
      acc[order.seat_id] = [];
    }
    acc[order.seat_id].push(order);
    return acc;
  }, {});

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">üç≥ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ß</h1>

      {Object.keys(groupedOrders).length === 0 ? (
        <div className="text-center text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</div>
      ) : (
        Object.keys(groupedOrders).map((seatId) => (
          <div key={seatId} className="mb-6">
            <div className="font-bold text-xl mb-4">‡πÇ‡∏ï‡πä‡∏∞: {seatId}</div>

            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
              {groupedOrders[seatId].map((order) => (
                <div
                  key={order.purchase_id}
                  className="border rounded-xl shadow p-4 bg-white"
                >
                  <div className="font-bold text-lg">{order.product_name}</div>
                  <div className="text-sm text-gray-600 mb-2">
                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {order.purchase_quantity}
                  </div>
                  <div className="text-sm text-gray-600 mb-2">
                    ‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø{order.product_price * order.purchase_quantity}
                  </div>
                  <ul className="text-sm mb-2">
                    {order.purchase_size && (
                      <li>‡∏Ç‡∏ô‡∏≤‡∏î: {order.purchase_size}</li>
                    )}
                    {order.purchase_spiceLevel && (
                      <li>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î: {order.purchase_spiceLevel}</li>
                    )}
                    {order.purchase_toppings &&
                      order.purchase_toppings !== "[]" && (
                        <li>
                          ‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á:{" "}
                          {Array.isArray(order.purchase_toppings)
                            ? order.purchase_toppings.join(", ")
                            : JSON.parse(order.purchase_toppings).join(", ")}
                        </li>
                      )}
                    {order.purchase_description && (
                      <li>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {order.purchase_description}</li>
                    )}
                  </ul>
                  <div className="text-sm mb-1">
                    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á:{" "}
                    {new Date(order.purchase_date).toLocaleString("th-TH", {
                      timeZone: "Asia/Bangkok",
                    })}
                  </div>

                  <div className="text-sm">
                    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{" "}
                    <span className="font-semibold text-blue-600">
                      {order.purchase_status}
                    </span>
                  </div>
                  <div className="flex space-x-2 mt-2">
                    <button
                      className="bg-blue-500 text-white px-3 py-1 rounded"
                      onClick={() =>
                        handleStatusUpdate(order.purchase_id, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥")
                      }
                    >
                      ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
                    </button>
                    <button
                      className="bg-green-600 text-white px-3 py-1 rounded"
                      onClick={() =>
                        handleStatusUpdate(order.purchase_id, "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                      }
                    >
                      ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))
      )}
    </div>
  );
}
