"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { useCart } from "../../../store/cartContext";

function Page() {
  const { product_id } = useParams();
  const [product, setProduct] = useState(null);
  const { addToCart, cart } = useCart();
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(true);

  const [options, setOptions] = useState([]); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
  const [selectedOptions, setSelectedOptions] = useState({});
  const [purchase_description, setPurchaseDescription] = useState("");

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
useEffect(() => {
  if (product_id) {
    setLoading(true);
    fetch(`/api/product/${product_id}`)
      .then((res) => res.json())
      .then((data) => {
        setProduct(data);
        setLoading(false);

        if (data.product_type_id) {
          fetch(`/api/product_option?product_type_id=${data.product_type_id}`)
            .then((res) => res.json())
            .then((optionData) => {
              console.log("Loaded options from API:", optionData);
              setOptions(optionData);
            })
            .catch((err) => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err));
        } else {
          console.log("product_type_id is missing in product data");
        }
      })
      .catch((err) => {
        console.error("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err);
        setLoading(false);
      });
  }
}, [product_id]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const handleOptionChange = (optionType, value, isMultiple) => {
    setSelectedOptions((prev) => {
      if (isMultiple) {
        const prevValues = prev[optionType] || [];
        const newValues = prevValues.includes(value)
          ? prevValues.filter((v) => v !== value)
          : [...prevValues, value];
        return { ...prev, [optionType]: newValues };
      } else {
        return { ...prev, [optionType]: value };
      }
    });
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤+‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const handleAddToCart = () => {
    if (!product) return;
    const updatedProduct = {
      ...product,
      selected_options: selectedOptions,
      purchase_description,
      quantity: 1, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1 ‡∏ä‡∏¥‡πâ‡∏ô
    };
    addToCart(updatedProduct);
    setMessage(`‚úÖ ${product.product_name} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`);
    setTimeout(() => setMessage(""), 1500);
  };

  // ‡πÅ‡∏™‡∏î‡∏á input ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° option_type)
  const renderOptionInputs = () => {
    const grouped = options.reduce((acc, option) => {
      if (!acc[option.option_type]) acc[option.option_type] = [];
      acc[option.option_type].push(option);
      return acc;
    }, {});

    return Object.entries(grouped).map(([type, optionList]) => {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô checkbox (multiple) ‡∏´‡∏£‡∏∑‡∏≠ select (single)
      const isMultiple = optionList.some((o) => o.option_price > 0);
      return (
        <div key={type} className="mb-4">
          <label className="block font-semibold mb-1">{type}:</label>
          {isMultiple ? (
            optionList.map((opt) => (
              <label key={opt.option_value} className="flex items-center mb-1">
                <input
                  type="checkbox"
                  checked={(selectedOptions[type] || []).includes(opt.option_value)}
                  onChange={() => handleOptionChange(type, opt.option_value, true)}
                  className="mr-2"
                />
                {opt.option_value} {opt.option_price > 0 ? `(+${opt.option_price}‡∏ø)` : ""}
              </label>
            ))
          ) : (
            <select
              value={selectedOptions[type] || ""}
              onChange={(e) => handleOptionChange(type, e.target.value, false)}
              className="border rounded px-3 py-2 w-full"
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {type} --</option>
              {optionList.map((opt) => (
                <option key={opt.option_value} value={opt.option_value}>
                  {opt.option_value} {opt.option_price > 0 ? `(+${opt.option_price}‡∏ø)` : ""}
                </option>
              ))}
            </select>
          )}
        </div>
      );
    });
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      {product && !loading ? (
        <div className="bg-white rounded-xl shadow p-4">
          <h1 className="text-3xl font-bold mb-4">{product.product_name}</h1>

          <div className="flex justify-center items-center">
            <Image
              src={`/uploads/${product.product_image}`}
              alt={product.product_name || "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}
              width={250}
              height={250}
              className="rounded mb-4"
            />
          </div>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          {renderOptionInputs()}

          {/* ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
          <div className="mb-4">
            <label className="block font-semibold mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
            <textarea
              value={purchase_description}
              onChange={(e) => setPurchaseDescription(e.target.value)}
              className="w-full border rounded px-3 py-2"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å, ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ø‡∏•‡∏Ø"
            />
          </div>

          {/* ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ */}
          {message && (
            <div className="mb-4 p-3 bg-green-100 text-green-700 rounded text-center font-semibold">
              {message}
            </div>
          )}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ */}
          <button
            className="mt-4 w-full bg-green-500 text-white py-2 rounded hover:bg-green-600 transition"
            onClick={handleAddToCart}
          >
            ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
          </button>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° */}
          <Link href={"/order/product"} className="block text-center mt-4">
            <button className="w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-600 transition">
              üçΩÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°
            </button>
          </Link>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ */}
          <Link href={`/order/cart`} className="fixed bottom-6 right-6 z-50">
            <button className="bg-green-600 text-white px-5 py-2 rounded-full shadow-lg hover:bg-green-700 transition">
              üõí ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({cart.reduce((sum, item) => sum + (item.quantity || 1), 0)})
            </button>
          </Link>
        </div>
      ) : (
        <div className="text-center mt-10">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...</div>
      )}
    </div>
  );
}

export default Page;
