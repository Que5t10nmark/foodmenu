"use client";
import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { useCart } from "../../../store/cartContext";

function Page() {
  const { product_id } = useParams();
  const [product, setProduct] = useState(null);
  const { addToCart, cart } = useCart();
  const [message, setMessage] = useState("");
  const [purchase_spiceLevel, setPurchaseSpiceLevel] = useState("‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î");
  const [purchase_toppings, setPurchaseToppings] = useState([]);
  const [purchase_size, setPurchaseSize] = useState("‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤");
  const [purchase_description, setPurchaseDescription] = useState("");

  useEffect(() => {
    if (product_id) {
      fetch(`/api/product/${product_id}`)
        .then((res) => res.json())
        .then(setProduct)
        .catch((err) => console.error("‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", err));
    }
  }, [product_id]);

  const handleToppingChange = (topping) => {
    setPurchaseToppings((prev) =>
      prev.includes(topping)
        ? prev.filter((t) => t !== topping)
        : [...prev, topping]
    );
  };

  const handleAddToCart = (product) => {
    const updatedProduct = {
      ...product,
      purchase_size,
      purchase_spiceLevel,
      purchase_toppings,
      purchase_description,
    };
    addToCart(updatedProduct);
    alert(`‚úÖ ${product.product_name} ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß`);
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      {product ? (
        <div className="bg-white rounded-xl shadow p-4">
          <h1 className="text-3xl font-bold mb-4">{product.product_name}</h1>
          <Image
            src={`/uploads/${product.product_image}`}
            alt={product.product_name || "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}
            width={400}
            height={400}
            className="rounded mb-4"
          />

          {/* ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î */}
          <div className="mb-4">
            <label className="block font-semibold mb-1">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î:</label>
            <select
              value={purchase_spiceLevel}
              onChange={(e) => setPurchaseSpiceLevel(e.target.value)}
              className="border rounded px-3 py-2 w-full"
            >
              <option>‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î</option>
              <option>‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢</option>
              <option>‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å</option>
            </select>
          </div>

          {/* ‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á */}
          <div className="mb-4">
            <label className="block font-semibold mb-1">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á:</label>
            {["‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß", "‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß", "‡∏ä‡∏µ‡∏™"].map((topping) => (
              <label key={topping} className="flex items-center mb-1">
                <input
                  type="checkbox"
                  checked={purchase_toppings.includes(topping)}
                  onChange={() => handleToppingChange(topping)}
                  className="mr-2"
                />
                {topping}
              </label>
            ))}
          </div>

          {/* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
          <div className="mb-4">
            <label className="block font-semibold mb-1">‡∏Ç‡∏ô‡∏≤‡∏î:</label>
            <select
              value={purchase_size}
              onChange={(e) => setPurchaseSize(e.target.value)}
              className="border rounded px-3 py-2 w-full"
            >
              <option>‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤</option>
              <option>‡∏û‡∏¥‡πÄ‡∏®‡∏©</option>
            </select>
          </div>

          {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
          <div className="mb-4">
            <label className="block font-semibold mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
            <textarea
              value={purchase_description}
              onChange={(e) => setPurchaseDescription(e.target.value)}
              className="w-full border rounded px-3 py-2"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏ú‡∏±‡∏Å, ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ø‡∏•‡∏Ø"
            />
          </div>

          {message && (
            <div className="mb-4 p-2 bg-green-100 text-green-700 rounded">
              {message}
            </div>
          )}

          <button
            className="mt-4 w-full bg-green-500 text-white py-2 rounded hover:bg-green-300"
            onClick={() => handleAddToCart(product)}
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
          </button>

          <Link href={"/order/product"} className="block text-center mt-4">
            <button className="mt-4 w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-300">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°
            </button>
          </Link>
          <Link href={`/order/cart`} className="fixed bottom-6 right-6 z-50">
            <button className="bg-green-600 text-white px-4 py-2 rounded-full shadow-lg">
              üõí ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (
              {cart.reduce((sum, item) => sum + item.quantity, 0)})
            </button>
          </Link>
        </div>
      ) : (
        <div className="text-center py-20 text-gray-500">
          ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...
        </div>
      )
      }
    </div>
  );
}

export default Page;
